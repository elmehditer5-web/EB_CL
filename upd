# --- begin robust merge block ---

right_df = data_frame.copy()

# Ensure 'id_pm' exists as a plain COLUMN (not an index level)
if 'id_pm' not in right_df.columns:
    # If it's hiding in the index, bring it out
    right_df = right_df.reset_index()
else:
    # If the index name (or any index level name) is also 'id_pm', kill the ambiguity
    idx_names = list(getattr(right_df.index, 'names', [right_df.index.name]))
    if 'id_pm' in idx_names:
        right_df = right_df.reset_index(drop=True)

# Keep only columns not already present on the left, plus the join key
cols_to_add = ['id_pm'] + [c for c in right_df.columns
                           if c != 'id_pm' and c not in data_fin.columns]
right_df = right_df.loc[:, cols_to_add]

# One row per id_pm on the right side to keep the join predictable
right_df = right_df.drop_duplicates('id_pm')

# Optional: if you fear accidental duplicate names elsewhere
right_df = right_df.loc[:, ~right_df.columns.duplicated()]

# Finally, the safe merge
merged_data = data_fin.merge(
    right_df,
    on='id_pm',
    how='left',
    validate='many_to_one',   # left can repeat id_pm; right must be unique
    suffixes=('', '_right')   # protect against surprise overlaps
)

# --- end robust merge block ---
